namespace Gl;

using GLint64 = System.Int64;
using GLuint64 = System.UInt64;
using GLsync = System.IntPtr;
using GLenum = System.UInt32;
using GLsizei = System.Int32;
using GLint = System.Int32;
using GLbitfield = System.UInt32;
using GLuint = System.UInt32;
using GLboolean = System.Byte;
using GLchar = System.Byte;
using GLfloat = System.Single;
using GLsizeiptr = System.IntPtr;
using GLintptr = System.IntPtr;
using GLubyte = System.Byte;
using GLbyte = System.SByte;
using GLshort = System.Int16;
using GLushort = System.UInt16;
using GLdouble = System.Double;

// Try to _not_ look in here

//public unsafe class Gl20 {
//    public readonly delegate* unmanaged[Stdcall]<GLenum, void> glActiveTexture;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, void> glAttachShader;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, void> glBeginQuery;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLchar*, void> glBindAttribLocation;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, void> glBindBuffer;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, void> glBindTexture;
//    public readonly delegate* unmanaged[Stdcall]<GLfloat, GLfloat, GLfloat, GLfloat, void> glBlendColor;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, void> glBlendEquation;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, void> glBlendEquationSeparate;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, void> glBlendFunc;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLenum, GLenum, void> glBlendFuncSeparate;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLsizeiptr, void*, GLenum, void> glBufferData;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLintptr, GLsizeiptr, void*, void> glBufferSubData;
//    public readonly delegate* unmanaged[Stdcall]<GLbitfield, void> glClear;
//    public readonly delegate* unmanaged[Stdcall]<GLfloat, GLfloat, GLfloat, GLfloat, void> glClearColor;
//    public readonly delegate* unmanaged[Stdcall]<GLdouble, void> glClearDepth;
//    public readonly delegate* unmanaged[Stdcall]<GLint, void> glClearStencil;
//    public readonly delegate* unmanaged[Stdcall]<GLboolean, GLboolean, GLboolean, GLboolean, void> glColorMask;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, void> glCompileShader;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, void*, void> glCompressedTexImage1D;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, void*, void> glCompressedTexImage2D;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, void*, void> glCompressedTexImage3D;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, void*, void> glCompressedTexSubImage1D;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, void*, void> glCompressedTexSubImage2D;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, void*, void> glCompressedTexSubImage3D;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint, void> glCopyTexImage1D;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, void> glCopyTexImage2D;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLint, GLint, GLint, GLsizei, void> glCopyTexSubImage1D;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, void> glCopyTexSubImage2D;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, void> glCopyTexSubImage3D;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, void> glCullFace;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLuint*, void> glDeleteBuffers;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, void> glDeleteProgram;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLuint*, void> glDeleteQueries;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, void> glDeleteShader;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLuint*, void> glDeleteTextures;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, void> glDepthFunc;
//    public readonly delegate* unmanaged[Stdcall]<GLboolean, void> glDepthMask;
//    public readonly delegate* unmanaged[Stdcall]<GLdouble, GLdouble, void> glDepthRange;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, void> glDetachShader;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, void> glDisable;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, void> glDisableVertexAttribArray;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLsizei, void> glDrawArrays;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, void> glDrawBuffer;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLenum*, void> glDrawBuffers;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLsizei, GLenum, void*, void> glDrawElements;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, GLuint, GLsizei, GLenum, void*, void> glDrawRangeElements;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, void> glEnable;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, void> glEnableVertexAttribArray;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, void> glEndQuery;
//    public readonly delegate* unmanaged[Stdcall]<void> glFinish;
//    public readonly delegate* unmanaged[Stdcall]<void> glFlush;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, void> glFrontFace;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLuint*, void> glGenBuffers;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLuint*, void> glGenQueries;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLuint*, void> glGenTextures;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLchar*, void> glGetActiveAttrib;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLchar*, void> glGetActiveUniform;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizei, GLsizei*, GLuint*, void> glGetAttachedShaders;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLboolean*, void> glGetBooleanv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLint*, void> glGetBufferParameteriv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, void**, void> glGetBufferPointerv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLintptr, GLsizeiptr, void*, void> glGetBufferSubData;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, void*, void> glGetCompressedTexImage;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLdouble*, void> glGetDoublev;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLfloat*, void> glGetFloatv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint*, void> glGetIntegerv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizei, GLsizei*, GLchar*, void> glGetProgramInfoLog;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint*, void> glGetProgramiv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLint*, void> glGetQueryiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint*, void> glGetQueryObjectiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLuint*, void> glGetQueryObjectuiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizei, GLsizei*, GLchar*, void> glGetShaderInfoLog;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint*, void> glGetShaderiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizei, GLsizei*, GLchar*, void> glGetShaderSource;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLenum, GLenum, void*, void> glGetTexImage;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLenum, GLfloat*, void> glGetTexLevelParameterfv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLenum, GLint*, void> glGetTexLevelParameteriv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLfloat*, void> glGetTexParameterfv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLint*, void> glGetTexParameteriv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLfloat*, void> glGetUniformfv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLint*, void> glGetUniformiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLdouble*, void> glGetVertexAttribdv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLfloat*, void> glGetVertexAttribfv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint*, void> glGetVertexAttribiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, void**, void> glGetVertexAttribPointerv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, void> glHint;
//    public readonly delegate* unmanaged[Stdcall]<GLfloat, void> glLineWidth;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, void> glLinkProgram;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, void> glLogicOp;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint*, GLsizei*, GLsizei, void> glMultiDrawArrays;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLsizei*, GLenum, void**, GLsizei, void> glMultiDrawElements;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLfloat, void> glPixelStoref;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, void> glPixelStorei;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLfloat, void> glPointParameterf;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLfloat*, void> glPointParameterfv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, void> glPointParameteri;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint*, void> glPointParameteriv;
//    public readonly delegate* unmanaged[Stdcall]<GLfloat, void> glPointSize;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, void> glPolygonMode;
//    public readonly delegate* unmanaged[Stdcall]<GLfloat, GLfloat, void> glPolygonOffset;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, void> glReadBuffer;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, void*, void> glReadPixels;
//    public readonly delegate* unmanaged[Stdcall]<GLfloat, GLboolean, void> glSampleCoverage;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLint, GLsizei, GLsizei, void> glScissor;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizei, GLchar**, GLint*, void> glShaderSource;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLuint, void> glStencilFunc;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLint, GLuint, void> glStencilFuncSeparate;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, void> glStencilMask;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, void> glStencilMaskSeparate;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLenum, void> glStencilOp;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLenum, GLenum, void> glStencilOpSeparate;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, void*, void> glTexImage1D;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, void*, void> glTexImage2D;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, void*, void> glTexImage3D;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLfloat, void> glTexParameterf;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLfloat*, void> glTexParameterfv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLint, void> glTexParameteri;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLint*, void> glTexParameteriv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLint, GLsizei, GLenum, GLenum, void*, void> glTexSubImage1D;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, void*, void> glTexSubImage2D;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, void*, void> glTexSubImage3D;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLfloat, void> glUniform1f;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLsizei, GLfloat*, void> glUniform1fv;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLint, void> glUniform1i;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLsizei, GLint*, void> glUniform1iv;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLfloat, GLfloat, void> glUniform2f;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLsizei, GLfloat*, void> glUniform2fv;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLint, GLint, void> glUniform2i;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLsizei, GLint*, void> glUniform2iv;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLfloat, GLfloat, GLfloat, void> glUniform3f;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLsizei, GLfloat*, void> glUniform3fv;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLint, GLint, GLint, void> glUniform3i;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLsizei, GLint*, void> glUniform3iv;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLfloat, GLfloat, GLfloat, GLfloat, void> glUniform4f;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLsizei, GLfloat*, void> glUniform4fv;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLint, GLint, GLint, GLint, void> glUniform4i;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLsizei, GLint*, void> glUniform4iv;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLsizei, GLboolean, GLfloat*, void> glUniformMatrix2fv;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLsizei, GLboolean, GLfloat*, void> glUniformMatrix3fv;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLsizei, GLboolean, GLfloat*, void> glUniformMatrix4fv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, void> glUseProgram;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, void> glValidateProgram;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLdouble, void> glVertexAttrib1d;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLdouble*, void> glVertexAttrib1dv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLfloat, void> glVertexAttrib1f;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLfloat*, void> glVertexAttrib1fv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLshort, void> glVertexAttrib1s;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLshort*, void> glVertexAttrib1sv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLdouble, GLdouble, void> glVertexAttrib2d;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLdouble*, void> glVertexAttrib2dv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLfloat, GLfloat, void> glVertexAttrib2f;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLfloat*, void> glVertexAttrib2fv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLshort, GLshort, void> glVertexAttrib2s;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLshort*, void> glVertexAttrib2sv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLdouble, GLdouble, GLdouble, void> glVertexAttrib3d;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLdouble*, void> glVertexAttrib3dv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLfloat, GLfloat, GLfloat, void> glVertexAttrib3f;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLfloat*, void> glVertexAttrib3fv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLshort, GLshort, GLshort, void> glVertexAttrib3s;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLshort*, void> glVertexAttrib3sv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLbyte*, void> glVertexAttrib4bv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLdouble, GLdouble, GLdouble, GLdouble, void> glVertexAttrib4d;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLdouble*, void> glVertexAttrib4dv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLfloat, GLfloat, GLfloat, GLfloat, void> glVertexAttrib4f;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLfloat*, void> glVertexAttrib4fv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint*, void> glVertexAttrib4iv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLbyte*, void> glVertexAttrib4Nbv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint*, void> glVertexAttrib4Niv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLshort*, void> glVertexAttrib4Nsv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLubyte, GLubyte, GLubyte, GLubyte, void> glVertexAttrib4Nub;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLubyte*, void> glVertexAttrib4Nubv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint*, void> glVertexAttrib4Nuiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLushort*, void> glVertexAttrib4Nusv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLshort, GLshort, GLshort, GLshort, void> glVertexAttrib4s;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLshort*, void> glVertexAttrib4sv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLubyte*, void> glVertexAttrib4ubv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint*, void> glVertexAttrib4uiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLushort*, void> glVertexAttrib4usv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLenum, GLboolean, GLsizei, void*, void> glVertexAttribPointer;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLint, GLsizei, GLsizei, void> glViewport;
//}

//public unsafe class Gl21:Gl20 {
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLsizei, GLboolean, GLfloat*, void> glUniformMatrix2x3fv;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLsizei, GLboolean, GLfloat*, void> glUniformMatrix2x4fv;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLsizei, GLboolean, GLfloat*, void> glUniformMatrix3x2fv;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLsizei, GLboolean, GLfloat*, void> glUniformMatrix3x4fv;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLsizei, GLboolean, GLfloat*, void> glUniformMatrix4x2fv;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLsizei, GLboolean, GLfloat*, void> glUniformMatrix4x3fv;
//}
//public unsafe class Gl30:Gl21 {
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, void> glBeginConditionalRender;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, void> glBeginTransformFeedback;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, GLuint, void> glBindBufferBase;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, GLuint, GLintptr, GLsizeiptr, void> glBindBufferRange;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, char*, void> glBindFragDataLocation;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, void> glBindFramebuffer;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, void> glBindRenderbuffer;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, void> glBindVertexArray;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum, void> glBlitFramebuffer;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, void> glClampColor;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLfloat, GLint, void> glClearBufferfi;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLfloat*, void> glClearBufferfv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLint*, void> glClearBufferiv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLuint*, void> glClearBufferuiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLboolean, GLboolean, GLboolean, GLboolean, void> glColorMaski;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLuint*, void> glDeleteFramebuffers;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLuint*, void> glDeleteRenderbuffers;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLuint*, void> glDeleteVertexArrays;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, void> glDisablei;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, void> glEnablei;
//    public readonly delegate* unmanaged[Stdcall]<void> glEndConditionalRender;
//    public readonly delegate* unmanaged[Stdcall]<void> glEndTransformFeedback;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLintptr, GLsizeiptr, void> glFlushMappedBufferRange;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLenum, GLuint, void> glFramebufferRenderbuffer;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLenum, GLuint, GLint, void> glFramebufferTexture1D;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLenum, GLuint, GLint, void> glFramebufferTexture2D;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLenum, GLuint, GLint, GLint, void> glFramebufferTexture3D;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLuint, GLint, GLint, void> glFramebufferTextureLayer;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, void> glGenerateMipmap;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLuint*, void> glGenFramebuffers;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLuint*, void> glGenRenderbuffers;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLuint*, void> glGenVertexArrays;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, GLboolean*, void> glGetBooleani_v;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLenum, GLint*, void> glGetFramebufferAttachmentParameteriv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, GLint*, void> glGetIntegeri_v;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLint*, void> glGetRenderbufferParameteriv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLint*, void> glGetTexParameterIiv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLuint*, void> glGetTexParameterIuiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLsizei, GLsizei*, GLsizei*, GLenum*, char*, void> glGetTransformFeedbackVarying;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLuint*, void> glGetUniformuiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint*, void> glGetVertexAttribIiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLuint*, void> glGetVertexAttribIuiv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLsizei, GLsizei, void> glRenderbufferStorage;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLsizei, GLenum, GLsizei, GLsizei, void> glRenderbufferStorageMultisample;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLint*, void> glTexParameterIiv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLuint*, void> glTexParameterIuiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizei, char**, GLenum, void> glTransformFeedbackVaryings;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLuint, void> glUniform1ui;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLsizei, GLuint*, void> glUniform1uiv;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLuint, GLuint, void> glUniform2ui;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLsizei, GLuint*, void> glUniform2uiv;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLuint, GLuint, GLuint, void> glUniform3ui;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLsizei, GLuint*, void> glUniform3uiv;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLuint, GLuint, GLuint, GLuint, void> glUniform4ui;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLsizei, GLuint*, void> glUniform4uiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, void> glVertexAttribI1i;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint*, void> glVertexAttribI1iv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, void> glVertexAttribI1ui;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint*, void> glVertexAttribI1uiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLint, void> glVertexAttribI2i;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint*, void> glVertexAttribI2iv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLuint, void> glVertexAttribI2ui;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint*, void> glVertexAttribI2uiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLint, GLint, void> glVertexAttribI3i;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint*, void> glVertexAttribI3iv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLuint, GLuint, void> glVertexAttribI3ui;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint*, void> glVertexAttribI3uiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLbyte*, void> glVertexAttribI4bv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLint, GLint, GLint, void> glVertexAttribI4i;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint*, void> glVertexAttribI4iv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLshort*, void> glVertexAttribI4sv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLubyte*, void> glVertexAttribI4ubv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLuint, GLuint, GLuint, void> glVertexAttribI4ui;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint*, void> glVertexAttribI4uiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLushort*, void> glVertexAttribI4usv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLenum, GLsizei, void*, void> glVertexAttribIPointer;
//}

//public unsafe class Gl31:Gl30 {
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr, void> glCopyBufferSubData;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLsizei, GLsizei, void> glDrawArraysInstanced;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLsizei, GLenum, void*, GLsizei, void> glDrawElementsInstanced;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLenum, GLint*, void> glGetActiveUniformBlockiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLsizei, GLsizei*, GLchar*, void> glGetActiveUniformBlockName;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLsizei, GLsizei*, GLchar*, void> glGetActiveUniformName;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizei, GLuint*, GLenum, GLint*, void> glGetActiveUniformsiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizei, GLchar**, GLuint*, void> glGetUniformIndices;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, void> glPrimitiveRestartIndex;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLuint, void> glTexBuffer;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLuint, void> glUniformBlockBinding;
//}

//public unsafe class Gl32:Gl31 {
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLuint, char*, void> glBindFragDataLocationIndexed;
//    public readonly delegate* unmanaged[Stdcall]<GLsync, void> glDeleteSync;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLsizei, GLenum, void*, GLint, void> glDrawElementsBaseVertex;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLsizei, GLenum, void*, GLsizei, GLint, void> glDrawElementsInstancedBaseVertex;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, GLuint, GLsizei, GLenum, void*, GLint, void> glDrawRangeElementsBaseVertex;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLuint, GLint, void> glFramebufferTexture;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLint64*, void> glGetBufferParameteri64v;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, GLint64*, void> glGetInteger64i_v;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint64*, void> glGetInteger64v;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, GLfloat*, void> glGetMultisamplefv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint64*, void> glGetQueryObjecti64v;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLuint64*, void> glGetQueryObjectui64v;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLfloat*, void> glGetSamplerParameterfv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint*, void> glGetSamplerParameterIiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLuint*, void> glGetSamplerParameterIuiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint*, void> glGetSamplerParameteriv;
//    public readonly delegate* unmanaged[Stdcall]<GLsync, GLenum, GLsizei, GLsizei*, GLint*, void> glGetSynciv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLsizei*, GLenum, void**, GLsizei, GLint*, void> glMultiDrawElementsBaseVertex;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, void> glProvokingVertex;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, void> glQueryCounter;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLbitfield, void> glSampleMaski;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLfloat, void> glSamplerParameterf;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLfloat*, void> glSamplerParameterfv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint, void> glSamplerParameteri;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint*, void> glSamplerParameterIiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLuint*, void> glSamplerParameterIuiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint*, void> glSamplerParameteriv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, void> glTexImage2DMultisample;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, void> glTexImage3DMultisample;
//    public readonly delegate* unmanaged[Stdcall]<GLsync, GLbitfield, GLuint64, void> glWaitSync;
//}

//public unsafe class Gl33:Gl32 {
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, void> glBindSampler;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLuint*, void> glDeleteSamplers;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLuint*, void> glGenSamplers;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, void> glVertexAttribDivisor;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLboolean, GLuint, void> glVertexAttribP1ui;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLboolean, GLuint, void> glVertexAttribP2ui;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLboolean, GLuint, void> glVertexAttribP3ui;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLboolean, GLuint, void> glVertexAttribP4ui;
//}

//public unsafe class Gl40:Gl33 {
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, GLuint, void> glBeginQueryIndexed;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, void> glBindTransformFeedback;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, void> glBlendEquationi;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLenum, void> glBlendEquationSeparatei;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLenum, void> glBlendFunci;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLenum, GLenum, GLenum, void> glBlendFuncSeparatei;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLuint*, void> glDeleteTransformFeedbacks;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, void*, void> glDrawArraysIndirect;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, void*, void> glDrawElementsIndirect;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, void> glDrawTransformFeedback;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, GLuint, void> glDrawTransformFeedbackStream;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, void> glEndQueryIndexed;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLuint*, void> glGenTransformFeedbacks;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLuint, GLsizei, GLsizei*, GLchar*, void> glGetActiveSubroutineName;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLuint, GLenum, GLint*, void> glGetActiveSubroutineUniformiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLuint, GLsizei, GLsizei*, GLchar*, void> glGetActiveSubroutineUniformName;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLenum, GLint*, void> glGetProgramStageiv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, GLenum, GLint*, void> glGetQueryIndexediv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLdouble*, void> glGetUniformdv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLuint*, void> glGetUniformSubroutineuiv;
//    public readonly delegate* unmanaged[Stdcall]<GLfloat, void> glMinSampleShading;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLfloat*, void> glPatchParameterfv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, void> glPatchParameteri;
//    public readonly delegate* unmanaged[Stdcall]<void> glPauseTransformFeedback;
//    public readonly delegate* unmanaged[Stdcall]<void> glResumeTransformFeedback;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLsizei, GLuint*, void> glUniformSubroutinesuiv;
//}

//public unsafe class Gl41:Gl40 {
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, void> glActiveShaderProgram;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, void> glBindProgramPipeline;
//    public readonly delegate* unmanaged[Stdcall]<GLfloat, void> glClearDepthf;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLuint*, void> glDeleteProgramPipelines;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizei, GLdouble*, void> glDepthRangeArrayv;
//    public readonly delegate* unmanaged[Stdcall]<GLfloat, GLfloat, void> glDepthRangef;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLdouble, GLdouble, void> glDepthRangeIndexed;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLuint*, void> glGenProgramPipelines;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, GLdouble*, void> glGetDoublei_v;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, GLfloat*, void> glGetFloati_v;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizei, GLsizei*, GLenum*, void*, void> glGetProgramBinary;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizei, GLsizei*, GLchar*, void> glGetProgramPipelineInfoLog;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint*, void> glGetProgramPipelineiv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLint*, GLint*, void> glGetShaderPrecisionFormat;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLdouble*, void> glGetVertexAttribLdv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, void*, GLsizei, void> glProgramBinary;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint, void> glProgramParameteri;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLfloat, void> glProgramUniform1f;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLsizei, GLfloat*, void> glProgramUniform1fv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLint, void> glProgramUniform1i;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLsizei, GLint*, void> glProgramUniform1iv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLuint, void> glProgramUniform1ui;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLsizei, GLuint*, void> glProgramUniform1uiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLfloat, GLfloat, void> glProgramUniform2f;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLsizei, GLfloat*, void> glProgramUniform2fv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLint, GLint, void> glProgramUniform2i;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLsizei, GLint*, void> glProgramUniform2iv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLuint, GLuint, void> glProgramUniform2ui;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLsizei, GLuint*, void> glProgramUniform2uiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLfloat, GLfloat, GLfloat, void> glProgramUniform3f;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLsizei, GLfloat*, void> glProgramUniform3fv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLint, GLint, GLint, void> glProgramUniform3i;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLsizei, GLint*, void> glProgramUniform3iv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLuint, GLuint, GLuint, void> glProgramUniform3ui;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLsizei, GLuint*, void> glProgramUniform3uiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat, void> glProgramUniform4f;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLsizei, GLfloat*, void> glProgramUniform4fv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLint, GLint, GLint, GLint, void> glProgramUniform4i;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLsizei, GLint*, void> glProgramUniform4iv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLuint, GLuint, GLuint, GLuint, void> glProgramUniform4ui;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLsizei, GLuint*, void> glProgramUniform4uiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLsizei, GLboolean, GLfloat*, void> glProgramUniformMatrix2fv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLsizei, GLboolean, GLfloat*, void> glProgramUniformMatrix2x3fv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLsizei, GLboolean, GLfloat*, void> glProgramUniformMatrix2x4fv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLsizei, GLboolean, GLfloat*, void> glProgramUniformMatrix3fv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLsizei, GLboolean, GLfloat*, void> glProgramUniformMatrix3x2fv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLsizei, GLboolean, GLfloat*, void> glProgramUniformMatrix3x4fv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLsizei, GLboolean, GLfloat*, void> glProgramUniformMatrix4fv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLsizei, GLboolean, GLfloat*, void> glProgramUniformMatrix4x2fv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLsizei, GLboolean, GLfloat*, void> glProgramUniformMatrix4x3fv;
//    public readonly delegate* unmanaged[Stdcall]<void> glReleaseShaderCompiler;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizei, GLint*, void> glScissorArrayv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLint, GLsizei, GLsizei, void> glScissorIndexed;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint*, void> glScissorIndexedv;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLuint*, GLenum, void*, GLsizei, void> glShaderBinary;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLbitfield, GLuint, void> glUseProgramStages;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, void> glValidateProgramPipeline;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLdouble, void> glVertexAttribL1d;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLdouble*, void> glVertexAttribL1dv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLdouble, GLdouble, void> glVertexAttribL2d;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLdouble*, void> glVertexAttribL2dv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLdouble, GLdouble, GLdouble, void> glVertexAttribL3d;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLdouble*, void> glVertexAttribL3dv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLdouble, GLdouble, GLdouble, GLdouble, void> glVertexAttribL4d;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLdouble*, void> glVertexAttribL4dv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLenum, GLsizei, void*, void> glVertexAttribLPointer;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizei, GLfloat*, void> glViewportArrayv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLfloat, GLfloat, GLfloat, GLfloat, void> glViewportIndexedf;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLfloat*, void> glViewportIndexedfv;
//}

//public unsafe class Gl42:Gl41 {
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum, void> glBindImageTexture;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLsizei, GLsizei, GLuint, void> glDrawArraysInstancedBaseInstance;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLsizei, GLenum, void*, GLsizei, GLuint, void> glDrawElementsInstancedBaseInstance;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLsizei, GLenum, void*, GLsizei, GLint, GLuint, void> glDrawElementsInstancedBaseVertexBaseInstance;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, GLsizei, void> glDrawTransformFeedbackInstanced;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, GLuint, GLsizei, void> glDrawTransformFeedbackStreamInstanced;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLenum, GLint*, void> glGetActiveAtomicCounterBufferiv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLenum, GLsizei, GLint*, void> glGetInternalformativ;
//    public readonly delegate* unmanaged[Stdcall]<GLbitfield, void> glMemoryBarrier;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLsizei, GLenum, GLsizei, void> glTexStorage1D;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLsizei, GLenum, GLsizei, GLsizei, void> glTexStorage2D;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, void> glTexStorage3D;
//}

//public unsafe class Gl43:Gl42 {
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLintptr, GLsizei, void> glBindVertexBuffer;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLenum, GLenum, void*, void> glClearBufferData;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, void*, void> glClearBufferSubData;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, void> glCopyImageSubData;
//    public readonly delegate* unmanaged[Stdcall]<void*, void*, void> glDebugMessageCallback;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLenum, GLsizei, GLuint*, GLboolean, void> glDebugMessageControl;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLuint, GLenum, GLsizei, char*, void> glDebugMessageInsert;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLuint, void> glDispatchCompute;
//    public readonly delegate* unmanaged[Stdcall]<GLintptr, void> glDispatchComputeIndirect;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLint, void> glFramebufferParameteri;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLint*, void> glGetFramebufferParameteriv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLenum, GLsizei, GLint64*, void> glGetInternalformati64v;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, GLsizei, GLsizei*, char*, void> glGetObjectLabel;
//    public readonly delegate* unmanaged[Stdcall]<void*, GLsizei, GLsizei*, char*, void> glGetObjectPtrLabel;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, void**, void> glGetPointerv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLenum, GLint*, void> glGetProgramInterfaceiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLuint, GLsizei, GLenum*, GLsizei, GLsizei*, GLint*, void> glGetProgramResourceiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLuint, GLsizei, GLsizei*, char*, void> glGetProgramResourceName;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, void> glInvalidateBufferData;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLintptr, GLsizeiptr, void> glInvalidateBufferSubData;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLsizei, GLenum*, void> glInvalidateFramebuffer;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLsizei, GLenum*, GLint, GLint, GLint, GLint, void> glInvalidateSubFramebuffer;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, void> glInvalidateTexImage;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, void> glInvalidateTexSubImage;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, void*, GLsizei, GLsizei, void> glMultiDrawArraysIndirect;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, void*, GLsizei, GLsizei, void> glMultiDrawElementsIndirect;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, GLsizei, char*, void> glObjectLabel;
//    public readonly delegate* unmanaged[Stdcall]<void*, GLsizei, char*, void> glObjectPtrLabel;
//    public readonly delegate* unmanaged[Stdcall]<void> glPopDebugGroup;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, GLsizei, char*, void> glPushDebugGroup;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLuint, void> glShaderStorageBlockBinding;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, GLuint, GLintptr, GLsizeiptr, void> glTexBufferRange;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, void> glTexStorage2DMultisample;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, void> glTexStorage3DMultisample;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, void> glTextureView;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, void> glVertexAttribBinding;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLenum, GLboolean, GLuint, void> glVertexAttribFormat;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLenum, GLuint, void> glVertexAttribIFormat;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLenum, GLuint, void> glVertexAttribLFormat;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, void> glVertexBindingDivisor;
//}

//public unsafe class Gl44:Gl43 {
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, GLsizei, GLuint*, void> glBindBuffersBase;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLuint, GLsizei, GLuint*, GLintptr*, GLintptr*, void> glBindBuffersRange;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizei, GLuint*, void> glBindImageTextures;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizei, GLuint*, void> glBindSamplers;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizei, GLuint*, void> glBindTextures;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizei, GLuint*, GLintptr*, GLsizei*, void> glBindVertexBuffers;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLsizeiptr, void*, GLbitfield, void> glBufferStorage;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLenum, GLenum, void*, void> glClearTexImage;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, void*, void> glClearTexSubImage;
//}

//public unsafe class Gl45:Gl44 {
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, void> glBindTextureUnit;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum, void> glBlitNamedFramebuffer;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLenum, GLenum, void*, void> glClearNamedBufferData;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, void*, void> glClearNamedBufferSubData;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint, GLfloat, GLint, void> glClearNamedFramebufferfi;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint, GLfloat*, void> glClearNamedFramebufferfv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint, GLint*, void> glClearNamedFramebufferiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint, GLuint*, void> glClearNamedFramebufferuiv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLenum, void> glClipControl;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, void*, void> glCompressedTextureSubImage1D;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, void*, void> glCompressedTextureSubImage2D;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, void*, void> glCompressedTextureSubImage3D;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr, void> glCopyNamedBufferSubData;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLint, GLint, GLint, GLsizei, void> glCopyTextureSubImage1D;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, void> glCopyTextureSubImage2D;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, void> glCopyTextureSubImage3D;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLuint*, void> glCreateBuffers;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLuint*, void> glCreateFramebuffers;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLuint*, void> glCreateProgramPipelines;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLsizei, GLuint*, void> glCreateQueries;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLuint*, void> glCreateRenderbuffers;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLuint*, void> glCreateSamplers;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLsizei, GLuint*, void> glCreateTextures;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLuint*, void> glCreateTransformFeedbacks;
//    public readonly delegate* unmanaged[Stdcall]<GLsizei, GLuint*, void> glCreateVertexArrays;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, void> glDisableVertexArrayAttrib;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, void> glEnableVertexArrayAttrib;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLintptr, GLsizeiptr, void> glFlushMappedNamedBufferRange;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, void> glGenerateTextureMipmap;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLsizei, void*, void> glGetCompressedTextureImage;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, void*, void> glGetCompressedTextureSubImage;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint64*, void> glGetNamedBufferParameteri64v;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint*, void> glGetNamedBufferParameteriv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, void**, void> glGetNamedBufferPointerv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLintptr, GLsizeiptr, void*, void> glGetNamedBufferSubData;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLenum, GLint*, void> glGetNamedFramebufferAttachmentParameteriv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint*, void> glGetNamedFramebufferParameteriv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint*, void> glGetNamedRenderbufferParameteriv;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLsizei, void*, void> glGetnCompressedTexImage;
//    public readonly delegate* unmanaged[Stdcall]<GLenum, GLint, GLenum, GLenum, GLsizei, void*, void> glGetnTexImage;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLsizei, GLdouble*, void> glGetnUniformdv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLsizei, GLfloat*, void> glGetnUniformfv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLsizei, GLint*, void> glGetnUniformiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLsizei, GLuint*, void> glGetnUniformuiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLenum, GLintptr, void> glGetQueryBufferObjecti64v;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLenum, GLintptr, void> glGetQueryBufferObjectiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLenum, GLintptr, void> glGetQueryBufferObjectui64v;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLenum, GLintptr, void> glGetQueryBufferObjectuiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLenum, GLenum, GLsizei, void*, void> glGetTextureImage;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLenum, GLfloat*, void> glGetTextureLevelParameterfv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLenum, GLint*, void> glGetTextureLevelParameteriv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLfloat*, void> glGetTextureParameterfv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint*, void> glGetTextureParameterIiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLuint*, void> glGetTextureParameterIuiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint*, void> glGetTextureParameteriv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void*, void> glGetTextureSubImage;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLuint, GLint*, void> glGetTransformFeedbacki_v;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint*, void> glGetTransformFeedbackiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLenum, GLint64*, void> glGetVertexArrayIndexed64iv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLenum, GLint*, void> glGetVertexArrayIndexediv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint*, void> glGetVertexArrayiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizei, GLenum*, void> glInvalidateNamedFramebufferData;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizei, GLenum*, GLint, GLint, GLsizei, GLsizei, void> glInvalidateNamedFramebufferSubData;
//    public readonly delegate* unmanaged[Stdcall]<GLbitfield, void> glMemoryBarrierByRegion;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizeiptr, void*, GLenum, void> glNamedBufferData;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizeiptr, void*, GLbitfield, void> glNamedBufferStorage;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLintptr, GLsizeiptr, void*, void> glNamedBufferSubData;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, void> glNamedFramebufferDrawBuffer;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizei, GLenum*, void> glNamedFramebufferDrawBuffers;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint, void> glNamedFramebufferParameteri;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, void> glNamedFramebufferReadBuffer;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLenum, GLuint, void> glNamedFramebufferRenderbuffer;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLuint, GLint, void> glNamedFramebufferTexture;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLuint, GLint, GLint, void> glNamedFramebufferTextureLayer;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLsizei, GLsizei, void> glNamedRenderbufferStorage;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizei, GLenum, GLsizei, GLsizei, void> glNamedRenderbufferStorageMultisample;
//    public readonly delegate* unmanaged[Stdcall]<GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void*, void> glReadnPixels;
//    public readonly delegate* unmanaged[Stdcall]<void> glTextureBarrier;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLuint, void> glTextureBuffer;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLuint, GLintptr, GLsizei, void> glTextureBufferRange;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLfloat, void> glTextureParameterf;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLfloat*, void> glTextureParameterfv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint, void> glTextureParameteri;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint*, void> glTextureParameterIiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLuint*, void> glTextureParameterIuiv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLenum, GLint*, void> glTextureParameteriv;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizei, GLenum, GLsizei, void> glTextureStorage1D;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizei, GLenum, GLsizei, GLsizei, void> glTextureStorage2D;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, void> glTextureStorage2DMultisample;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, void> glTextureStorage3D;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, void> glTextureStorage3DMultisample;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLint, GLsizei, GLenum, GLenum, void*, void> glTextureSubImage1D;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, void*, void> glTextureSubImage2D;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, void*, void> glTextureSubImage3D;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLuint, void> glTransformFeedbackBufferBase;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLuint, GLintptr, GLsizei, void> glTransformFeedbackBufferRange;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLuint, void> glVertexArrayAttribBinding;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLint, GLenum, GLboolean, GLuint, void> glVertexArrayAttribFormat;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLint, GLenum, GLuint, void> glVertexArrayAttribIFormat;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLint, GLenum, GLuint, void> glVertexArrayAttribLFormat;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLuint, void> glVertexArrayBindingDivisor;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, void> glVertexArrayElementBuffer;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLuint, GLintptr, GLsizei, void> glVertexArrayVertexBuffer;
//    public readonly delegate* unmanaged[Stdcall]<GLuint, GLuint, GLsizei, GLuint*, GLintptr*, GLsizei*, void> glVertexArrayVertexBuffers;
//}
